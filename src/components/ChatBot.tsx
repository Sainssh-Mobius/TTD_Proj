import React, { useState, useRef, useEffect } from 'react';
import { Send, X, MessageCircle, User, Bot, Globe } from 'lucide-react';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  language?: string;
}

interface ChatBotProps {
  onClose: () => void;
}

const ChatBot: React.FC<ChatBotProps> = ({ onClose }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: '‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! I am TTD AI Assistant. How can I help you today? (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å, English, ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç, ‡§π‡§ø‡§Ç‡§¶‡•Ä)',
      timestamp: new Date(),
      language: 'multi'
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [currentLanguage, setCurrentLanguage] = useState('english');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const languages = [
    { code: 'english', name: 'English', flag: 'üá∫üá∏' },
    { code: 'telugu', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
    { code: 'tamil', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
    { code: 'hindi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' }
  ];

  const predefinedResponses = {
    english: {
      'darshan': 'Your darshan slot is confirmed for 2:30 PM today. Please arrive 15 minutes early at Gate 3.',
      'queue': 'You are currently #156 in the queue. Estimated wait time is 45 minutes.',
      'shuttle': 'Next shuttle to Tirumala departs in 8 minutes from Alipiri Base.',
      'laddu': 'Laddu booking is available. 1kg box: ‚Çπ500, 2kg box: ‚Çπ1000. Stock available.',
      'emergency': 'For medical emergency, press the emergency button on your dashboard or call 108.',
      'parking': 'Parking Lot A is 84% full. Consider using Parking Lot B which has more space.',
      'weather': 'Current weather: Clear skies, 28¬∞C. Good conditions for darshan.',
      'default': 'I can help you with darshan timings, queue status, shuttle services, laddu booking, parking, and emergency assistance.'
    },
    telugu: {
      'darshan': '‡∞Æ‡±Ä ‡∞¶‡∞∞‡±ç‡∞∂‡∞® ‡∞∏‡±ç‡∞≤‡∞æ‡∞ü‡±ç ‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞Æ‡∞ß‡±ç‡∞Ø‡∞æ‡∞π‡±ç‡∞®‡∞Ç 2:30 ‡∞ï‡±Å ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ó‡±á‡∞ü‡±ç 3 ‡∞µ‡∞¶‡±ç‡∞¶ 15 ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤‡±Å ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å‡∞ó‡∞æ ‡∞∞‡∞Ç‡∞°‡∞ø.',
      'queue': '‡∞Æ‡±Ä‡∞∞‡±Å ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§‡∞Ç ‡∞ï‡±ç‡∞Ø‡±Ç‡∞≤‡±ã #156‡∞µ ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å. ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞ö‡∞ø ‡∞â‡∞Ç‡∞°‡±á ‡∞∏‡∞Æ‡∞Ø‡∞Ç 45 ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤‡±Å.',
      'shuttle': '‡∞§‡∞ø‡∞∞‡±Å‡∞Æ‡∞≤‡∞ï‡±Å ‡∞§‡∞¶‡±Å‡∞™‡∞∞‡∞ø ‡∞∑‡∞ü‡∞ø‡∞≤‡±ç ‡∞Ö‡∞≤‡∞ø‡∞™‡∞ø‡∞∞‡∞ø ‡∞¨‡±á‡∞∏‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø 8 ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤‡±ç‡∞≤‡±ã ‡∞¨‡∞Ø‡∞≤‡±Å‡∞¶‡±á‡∞∞‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.',
      'default': '‡∞®‡±á‡∞®‡±Å ‡∞¶‡∞∞‡±ç‡∞∂‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞≤‡±Å, ‡∞ï‡±ç‡∞Ø‡±Ç ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø, ‡∞∑‡∞ü‡∞ø‡∞≤‡±ç ‡∞∏‡±á‡∞µ‡∞≤‡±Å, ‡∞≤‡∞°‡±ç‡∞°‡±Ç ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞§‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å.'
    },
    tamil: {
      'darshan': '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ∞‡Æø‡Æö‡Æ© ‡Æ∏‡Øç‡Æ≤‡Ææ‡Æü‡Øç ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç 2:30 ‡ÆÆ‡Æ£‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æï‡Øá‡Æü‡Øç 3 ‡Æá‡Æ≤‡Øç 15 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ§‡Ææ‡Æï ‡Æµ‡Ææ‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
      'queue': '‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æµ‡Æ∞‡Æø‡Æö‡Øà‡ÆØ‡Æø‡Æ≤‡Øç #156‡Æµ‡Æ§‡ØÅ ‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æï‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç 45 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
      'shuttle': '‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Æ≤‡Øà‡Æï‡Øç‡Æï‡ØÅ ‡ÆÖ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§ ‡Æ∑‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡ÆÖ‡Æ≤‡Æø‡Æ™‡Æø‡Æ∞‡Æø ‡Æ™‡Øá‡Æ∏‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ 8 ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æ™‡ØÅ‡Æ±‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç.',
      'default': '‡Æ§‡Æ∞‡Æø‡Æö‡Æ© ‡Æ®‡Øá‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æµ‡Æ∞‡Æø‡Æö‡Øà ‡Æ®‡Æø‡Æ≤‡Øà, ‡Æ∑‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øç, ‡Æ≤‡Æü‡Øç‡Æü‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡ÆÜ‡Æï‡Æø‡ÆØ‡Æµ‡Æ±‡Øç‡Æ±‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç.'
    },
    hindi: {
      'darshan': '‡§Ü‡§™‡§ï‡§æ ‡§¶‡§∞‡•ç‡§∂‡§® ‡§∏‡•ç‡§≤‡•â‡§ü ‡§Ü‡§ú ‡§¶‡•ã‡§™‡§π‡§∞ 2:30 ‡§¨‡§ú‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•Å‡§∑‡•ç‡§ü ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•á‡§ü 3 ‡§™‡§∞ 15 ‡§Æ‡§ø‡§®‡§ü ‡§™‡§π‡§≤‡•á ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç‡•§',
      'queue': '‡§Ü‡§™ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§§‡§æ‡§∞ ‡§Æ‡•á‡§Ç #156‡§µ‡•á‡§Ç ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡§∞ ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§∏‡§Æ‡§Ø 45 ‡§Æ‡§ø‡§®‡§ü ‡§π‡•à‡•§',
      'shuttle': '‡§§‡§ø‡§∞‡•Å‡§Æ‡§≤‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ó‡§≤‡•Ä ‡§∂‡§ü‡§≤ ‡§Ö‡§≤‡§ø‡§™‡§ø‡§∞‡§ø ‡§¨‡•á‡§∏ ‡§∏‡•á 8 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§∞‡§µ‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡•Ä‡•§',
      'default': '‡§Æ‡•à‡§Ç ‡§¶‡§∞‡•ç‡§∂‡§® ‡§∏‡§Æ‡§Ø, ‡§ï‡§§‡§æ‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø, ‡§∂‡§ü‡§≤ ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç, ‡§≤‡§°‡•ç‡§°‡•Ç ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§'
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const generateBotResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    const responses = predefinedResponses[currentLanguage as keyof typeof predefinedResponses];
    
    for (const [key, response] of Object.entries(responses)) {
      if (lowerMessage.includes(key)) {
        return response;
      }
    }
    
    return responses.default;
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot typing delay
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: generateBotResponse(inputMessage),
        timestamp: new Date(),
        language: currentLanguage
      };

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="fixed bottom-6 right-6 w-96 h-96 card-elevated flex flex-col z-50 shadow-2xl bg-white">
      {/* Header */}
      <div className="flex items-center justify-between p-5 border-b border-gray-200 bg-gradient-to-r from-amber-500 to-red-600 text-white rounded-t-2xl">
        <div className="flex items-center space-x-3">
          <div className="bg-white/20 p-2.5 rounded-xl backdrop-blur-sm">
            <MessageCircle className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-label-lg font-semibold">TTD AI Assistant</h3>
            <p className="text-label-sm opacity-80">Multi-language support</p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <select 
            value={currentLanguage}
            onChange={(e) => setCurrentLanguage(e.target.value)}
            className="bg-white/20 text-white text-label-sm px-3 py-1.5 rounded-lg border-none focus:ring-2 focus:ring-white/30 backdrop-blur-sm"
          >
            {languages.map(lang => (
              <option key={lang.code} value={lang.code} className="text-gray-800">
                {lang.flag} {lang.name}
              </option>
            ))}
          </select>
          <button 
            onClick={onClose} 
            className="hover:bg-white/20 p-1 rounded transition-colors"
            title="Close chat"
          >
            <X className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-5 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs px-4 py-3 rounded-2xl ${
              message.type === 'user' 
                ? 'bg-blue-500 text-white shadow-sm' 
                : 'bg-gray-100 text-gray-800 border border-gray-200'
            }`}>
              <div className="flex items-center space-x-2 mb-1">
                {message.type === 'user' ? (
                  <User className="w-3 h-3" />
                ) : (
                  <Bot className="w-3 h-3" />
                )}
                <span className="text-label-sm opacity-80 font-medium">
                  {message.type === 'user' ? 'You' : 'TTD AI'}
                </span>
              </div>
              <p className="text-body-sm leading-relaxed">{message.content}</p>
              <p className="text-label-sm opacity-60 mt-2">
                {message.timestamp.toLocaleTimeString()}
              </p>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-gray-100 px-4 py-3 rounded-2xl border border-gray-200">
              <div className="flex items-center space-x-2">
                <Bot className="w-3 h-3" />
                <span className="text-label-sm font-medium">TTD AI is typing...</span>
                <div className="flex space-x-1">
                  <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-5 border-t border-gray-200">
        <div className="flex items-center justify-between mb-3">
          <span className="text-xs text-gray-500">Quick Actions:</span>
          <div className="flex space-x-2">
            {['darshan', 'queue', 'shuttle', 'parking'].map(action => (
              <button
                key={action}
                onClick={() => setInputMessage(action)}
                className="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded transition-colors capitalize"
              >
                {action}
              </button>
            ))}
          </div>
        </div>
        
        <div className="flex space-x-2">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask about darshan, queue, shuttle..."
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-body-sm transition-colors"
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputMessage.trim()}
            className="bg-gradient-to-r from-amber-500 to-red-600 text-white p-3 rounded-xl hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
            title="Send message"
          >
            <Send className="w-4 h-4" />
          </button>
          <button
            onClick={() => {
              setMessages([{
                id: '1',
                type: 'bot',
                content: '‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! I am TTD AI Assistant. How can I help you today? (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å, English, ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç, ‡§π‡§ø‡§Ç‡§¶‡•Ä)',
                timestamp: new Date(),
                language: 'multi'
              }]);
              alert('Chat history cleared.');
            }}
            className="bg-gray-200 hover:bg-gray-300 text-gray-700 p-3 rounded-xl transition-colors"
            title="Clear chat"
          >
            <RefreshCw className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatBot;